{"version":3,"sources":["MobileModelModule.ts"],"names":["PyTorchCoreMobileModelModule","MobileModelModule","PyTorchCoreModelLoaderModule","ModelLoaderModule","NativeModules","MobileModel","download","modelPath","uri","preload","unload","execute","params"],"mappings":";;;;;;;AASA;;AACA;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,MAAM;AACJA,EAAAA,4BAA4B,EAAEC,iBAD1B;AAEJC,EAAAA,4BAA4B,EAAEC;AAF1B,IAGFC,0BAHJ;AAuGO,MAAMC,WAAwB,GAAG;AACtC,QAAMC,QAAN,CAAeC,SAAf,EAAsD;AACpD,UAAMC,GAAG,GAAG,yBAAYD,SAAZ,CAAZ;AACA,WAAO,MAAMJ,iBAAiB,CAACG,QAAlB,CAA2BE,GAA3B,CAAb;AACD,GAJqC;;AAKtC,QAAMC,OAAN,CAAcF,SAAd,EAAmD;AACjD,UAAMC,GAAG,GAAG,yBAAYD,SAAZ,CAAZ;AACA,WAAO,MAAMN,iBAAiB,CAACQ,OAAlB,CAA0BD,GAA1B,CAAb;AACD,GARqC;;AAStC,QAAME,MAAN,GAA8B;AAC5B,WAAO,MAAMT,iBAAiB,CAACS,MAAlB,EAAb;AACD,GAXqC;;AAYtC,QAAMC,OAAN,CAAiBJ,SAAjB,EAAuCK,MAAvC,EAA6E;AAC3E,UAAMJ,GAAG,GAAG,yBAAYD,SAAZ,CAAZ;AACA,WAAO,MAAMN,iBAAiB,CAACU,OAAlB,CAA0BH,GAA1B,EAA+BI,MAA/B,CAAb;AACD;;AAfqC,CAAjC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {getModelUri, ModelPath} from './Models';\n\nconst {\n  PyTorchCoreMobileModelModule: MobileModelModule,\n  PyTorchCoreModelLoaderModule: ModelLoaderModule,\n} = NativeModules;\n\nexport interface ModelResultMetrics {\n  /**\n   * The pack time, model inference time, and unpack time in milliseconds.\n   */\n  totalTime: number;\n  /**\n   * The model inference time in milliseconds.\n   */\n  inferenceTime: number;\n  /**\n   * The pack time in milliseconds.\n   */\n  packTime: number;\n  /**\n   * The unpack time in milliseconds.\n   */\n  unpackTime: number;\n}\n\n/**\n * Result of model inference. Each model result has the inference time and the\n * model result. The model result depends on the model and is therefore\n * specified as a generic type (i.e., template).\n *\n * @template T Model result type\n */\nexport interface ModelResult<T> {\n  /**\n   * The model result.\n   */\n  result: T;\n\n  /**\n   * The model result metrics, e.g., including inference time in milliseconds.\n   */\n  metrics: ModelResultMetrics;\n}\n\n/**\n * @packageDocumentation\n *\n * The `MobileModel` is the core module providing functions to run model\n * inference and preload models.\n */\nexport interface MobileModel {\n  /**\n   * Download a model to the local file system and return the local file path\n   * as a model. If the model path is a file path already, it will return the\n   * same path as a result.\n   *\n   * @param modelPath The model path as require or uri (i.e., `require`).\n   */\n  download(modelPath: ModelPath): Promise<string>;\n  /**\n   * Preload a model. If a model is not preloaded, it will be loaded during the\n   * first inference call. However, the first inference time will therefore\n   * take significantly longer. This function allows to preload a model ahead\n   * of time before running the first inference.\n   *\n   * @param modelPath The model path as require or uri (i.e., `require`).\n   */\n  preload(modelPath: ModelPath): Promise<void>;\n\n  /**\n   * Unload all model. If any model were loaded previously, they will be discarded.\n   * This function allows to load a new version of a model without restarting the\n   * app.\n   */\n  unload(): Promise<void>;\n\n  /**\n   * Run inference on a model.\n   *\n   * ```typescript\n   * const classificationModel = require('../models/mobilenet_v3_small.ptl');\n   *\n   * // or\n   *\n   * const classificationModel = require('https://example.com/models/mobilenet_v3_small.ptl');\n   *\n   * const image: Image = await ImageUtils.fromURL('https://image.url');\n   *\n   * const { result: {maxIdx} } = await MobileModel.execute(\n   *   classificationModel,\n   *   {\n   *     image,\n   *   }\n   * );\n   *\n   * const topClass = ImageClasses(scores);\n   * ```\n   *\n   * @param modelPath The model path as require or uri (i.e., `require`).\n   * @param params The input parameters for the model.\n   */\n  execute<T>(modelPath: ModelPath, params: any): Promise<ModelResult<T>>;\n}\n\nexport const MobileModel: MobileModel = {\n  async download(modelPath: ModelPath): Promise<string> {\n    const uri = getModelUri(modelPath);\n    return await ModelLoaderModule.download(uri);\n  },\n  async preload(modelPath: ModelPath): Promise<void> {\n    const uri = getModelUri(modelPath);\n    return await MobileModelModule.preload(uri);\n  },\n  async unload(): Promise<void> {\n    return await MobileModelModule.unload();\n  },\n  async execute<T>(modelPath: ModelPath, params: any): Promise<ModelResult<T>> {\n    const uri = getModelUri(modelPath);\n    return await MobileModelModule.execute(uri, params);\n  },\n};\n"]}