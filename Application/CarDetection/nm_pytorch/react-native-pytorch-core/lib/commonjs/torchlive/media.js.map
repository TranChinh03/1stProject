{"version":3,"sources":["media.ts"],"names":["media","__torchlive__"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwDO,MAAMA,KAAY,GAAGC,aAAa,CAACD,KAAnC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport type {Tensor} from 'react-native-pytorch-core';\nimport type {NativeJSRef} from '../NativeJSRef';\nimport type {Image} from '../ImageModule';\n\nexport interface Blob {\n  /**\n   * The `arrayBuffer()` function returns a `Promise` that resolves with the\n   * contents of the blob as binary data contained in an ArrayBuffer.\n   */\n  arrayBuffer(): Promise<Uint8Array>;\n  /**\n   * The Blob interface's size property returns the size of the Blob in bytes.\n   */\n  readonly size: number;\n}\n\ninterface Media {\n  /**\n   * Converts a [[Blob]] into an [[Image]]. The blob should be in RGB format.\n   * The width and height input should match the blob size.\n   * i.e. `blob.getDirectSize()` equals `width * height * 3`.\n   *\n   * @param blob [[Blob]] to turn into an [[Image]].\n   * @param width The width of the image.\n   * @param heigth The height of the image.\n   * @returns An [[Image]] object created from the [[Blob]].\n   */\n  imageFromBlob(blob: Blob, width: number, height: number): Image;\n\n  /**\n   * Converts a [[Tensor]] into an [[Image]]. The tensor should be in CHW (channels,\n   * height, width) format, with uint8 type.\n   *\n   * @param tensor [[Tensor]] to turn into an [[Image]].\n   * @returns An [[Image]] object created from the [[Tensor]].\n   */\n  imageFromTensor(tensor: Tensor): Image;\n\n  /**\n   * Converts a [[Tensor]] or [[NativeJSRef]] into a [[Blob]]. The blob can be\n   * used to create a [[Tensor]] object or convert into a [[NativeJSRef]] like\n   * an image or audio.\n   *\n   * @param obj Object to turn into a [[Blob]].\n   */\n  toBlob(obj: Tensor | NativeJSRef): Blob;\n}\n\ntype Torchlive = {\n  media: Media;\n};\n\ndeclare const __torchlive__: Torchlive;\n\nexport const media: Media = __torchlive__.media;\n"]}